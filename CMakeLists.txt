cmake_minimum_required(VERSION 3.3)

project(cuda-study C CXX)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    message("Have set c++11.")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    message("Have set c++0x.")
else()
    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfma")
#add_definitions(-D__CUDA_ARCH__=750)
#add_definitions(-D__cplusplus)
#add_definitions(-D__CUDACC__)

foreach(val ${CMAKE_CXX_FLAGS})
    message(${val})
endforeach()

set(CUDA_LINK_LIBS "")
list(APPEND CUDA_LINK_LIBS -lcuda -lcudart -lcublas -lcurand)
find_package(CUDA)
if(CMAKE_COMPILER_IS_GNUCXX)
    message(STATUS "CMAKE_COMPILER_IS_GNUCXX")
    set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -std=c++11")
endif()
set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -arch=sm_75")
message(STATUS "CUDA_NVCC_FLAGS: ${CUDA_NVCC_FLAGS}")

find_package(Threads REQUIRED)
message("Threads libs:")
foreach(val ${CMAKE_THREAD_LIBS_INIT})
    message(${val})
endforeach()
message("\n")
set(PROJECT_LINK_LIBS "")
list(APPEND PROJECT_LINK_LIBS ${CMAKE_THREAD_LIBS_INIT})
#list(APPEND PROJECT_LINK_LIBS -lopenblas)
list(APPEND PROJECT_LINK_LIBS c_plus_utils)
list(APPEND PROJECT_LINK_LIBS cuda-lib)

set(CUDA_PATH "/usr/local/cuda")
list(APPEND INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/src/include)
list(APPEND INCLUDE_DIRS ${CUDA_PATH}/include)
list(APPEND LINK_DIRS ${CUDA_PATH}/lib64)

include(${PROJECT_SOURCE_DIR}/thirdparty/OpenBLAS/build/install/share/cmake/OpenBLAS/OpenBLASConfig.cmake)
set(OpenBLAS_PATH "${PROJECT_SOURCE_DIR}/thirdparty/OpenBLAS/build/install")
list(APPEND INCLUDE_DIRS ${OpenBLAS_PATH}/include)
list(APPEND LINK_DIRS ${OpenBLAS_PATH}/lib64)

include_directories(${INCLUDE_DIRS})

link_directories(${LINK_DIRS})

add_subdirectory(src/cuda-lib)
add_subdirectory(src/cuda-utils)
# add_subdirectory(src/sse-study)
add_subdirectory(src/utilities)
#add_subdirectory(src/matrix-multiply)
add_subdirectory(src/cuda-matmul)
#add_subdirectory(src/gpu_matrixmul_cuda)
#add_subdirectory(src/simple)
#add_subdirectory(src/chapter03)
#add_subdirectory(src/chapter04)
add_subdirectory(src/utils)
add_subdirectory(src/gpu-memory)
#add_subdirectory(src/sparse-fwffm)
#add_subdirectory(src/sparse-fipnn)
add_subdirectory(src/cuda-texture)
